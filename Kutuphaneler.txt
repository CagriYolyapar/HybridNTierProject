Identity => Sizin icin hazır yetkilendirme ve rol sisteminin veritabanına Microsoft tarafından dahil edilmesidir

Entities
************
*Microsoft.AspNetCore.Identity => Identity işlemleri icin indirdigimiz bir kütüphanedir...BUrada dikkat edin Core olmayan bir Identity Package'ini referans almamalısınız...(Identity işlemleri icin kastettigimiz kullanıcı ekleme, login olma, signin olma , sifremi unuttum, mail gönderme)


*Microsoft.Extensions.Identity.Stores => NetCore MVC'den ve EF'ten bagımsız bir katmanda COre Identity yapısı kullanılacaksa Identity kütüphanesinin yanında Stores kütüphanesinin de indirilmesi gereklidir...

--------------------------------
MAP(Entities katmanından referans alır)
********
*Microsoft.EntityFrameworkCore => EF işlemlerinin temeli bu kütüphaneden baslar...(IEntityTypeConfiguration Interface'i de bu kütüphanededir...)
*Microsoft.EntityFrameworkCore.SqlServer => Core'da IEntityTypeConfiguration'in Sql server teknolojisi icin kullanılmasını saglayan ve implement edilmiş metotları bulunduran kütüphanedir (HasColumnName,HasColumnType)

-------------------------------------

DAL(MAP'ten referans alır dolayısıyla zincirleme olarak Core platfromunda Map'in icindeki ENTITIES de gelecegi icin ENTITIES'ten referans almak zorunda kalmayacagız)

*Microsoft.EntityFrameworkCore => İhtiyacı vardır ama zaten Map'ten gelmektedir...
*Microsoft.EntityFrameworkCore.SqlServer => İhtiyacı vardır ama Map'ten gelmektedir...
*Microsoft.EntityFrameworkCore.Tools => Migration işlemlerini terminalden yapmak icin Tools kütüphanesine ihtiyacı vardır...
*Microsoft.EntityFrameworkCore.Proxies => LazyLoading işlemlerinin acılabilmesi icin
*Microsoft.AspNetCore.Identity.EntityFrameworkCore => Sizin Context sınıfınız eger siz Identity kullanıyorsanız eskisi gibi DbContext'ten miras alamaz... Burada miras almanız gerkeen sınıf IdentityDbContext class'ından miras almalıdır...O class da bu kütüphanededir...

---------------------------------------------

COMMON

**********

SessionExtension sınıfı icin... Dikkat edin artık burada farklı bir katmanda ve .Net Standart Class Library'sindesiniz...O yüzden normal şartlardaki gibi SessionExtension icin kütüphaneler otomatik gelmez...

*Microsoft.AspNetCore.HTTP.Features => ISession tipini kullanmanızı saglar
*Microsoft.AspNetCore.HTTP.Extensions => Common katmanında ISession tipinin kullanmak istedigimiz GetString ve SetString gibi extension metotlarına ulasabilmenizi saglar...
*Newtonsoft.JSON => JSON Serialize ve Deserialize işlemleri icin indirdigimiz kütüphanedir...

------------------------------
BLL(DAL'den referans alır)
**************
*Microsoft.EntityFrameworkCore => İhtiyacı vardır ama zaten DAL'den gelmektedir...Service Injection options ayarları yapılacaktır...
*Microsoft.EntityFrameworkCore.SqlServer => İhtiyacı vardır ama zaten DAL'den gelmektedir...Service INjection yapılırken Options'un UseSqlServer metodunu kullanması gerekir o yüzden ihtiyacı vardır...
*Microsoft.AspNetCore.Identity => İhtiyacı vardır ama zincirleme referans olarak gelir...Identity servicelerini inject etmek icin (Dependency Injection'a bildirmek icin ihtiyacı vardır)
*System.Configuration.ConfigurationManager => Mevcut calısan projenin configuration'inina baska katmanlardan ulasabilmek icin indirmeni gereken küütüphanedir...
